AWSTemplateFormatVersion: '2010-09-09'
Description: Create an AWS Glue Database

Parameters:
  DatabaseName:
    Type: String
    Description: Name of the Glue Database

Resources:
  MyGlueDatabase:
    Type: AWS::Glue::Database
    Properties:
      CatalogId: !Ref AWS::AccountId
      DatabaseInput:
        Name: !Ref DatabaseName

aws cloudformation create-stack   --stack-name YourGlueDatabaseStack   --template-body file://glue-databse-cft.yaml   --parameters ParameterKey=DatabaseName,ParameterValue=test-db

stages:
  - deploy

variables:
  STACK_NAME: "YourGlueDatabaseStack"
  TEMPLATE_FILE: "glue-databse-cft.yaml"
  DATABASE_NAME: "test-db"

deploy_stack:
  stage: deploy
  script:
    - |
      if aws cloudformation describe-stacks --stack-name $STACK_NAME 2>/dev/null; then
        echo "Stack already exists. Skipping stack creation."
      else
        aws cloudformation create-stack \
          --stack-name $STACK_NAME \
          --template-body file://$TEMPLATE_FILE \
          --parameters ParameterKey=DatabaseName,ParameterValue=$DATABASE_NAME
      fi

=======================================

AWSTemplateFormatVersion: '2010-09-09'
Description: Create an AWS Glue Table for Athena

Parameters:
  DatabaseName:
    Type: String
    Description: Name of the Glue Database
  TableName:
    Type: String
    Description: Name of the Glue Table
  S3Location:
    Type: String
    Description: S3 location of the data

Resources:
  MyGlueTable:
    Type: AWS::Glue::Table
    Properties:
      DatabaseName: !Ref DatabaseName
      CatalogId: !Ref AWS::AccountId
      TableInput:
        Name: !Ref TableName
        StorageDescriptor:
          Columns:
            - Name: column1
              Type: string
            - Name: column2
              Type: int
          Location: !Ref S3Location
          InputFormat: org.apache.hadoop.mapred.TextInputFormat
          OutputFormat: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat
          SerdeInfo:
            SerializationLibrary: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe
          Parameters:
            classification: json
            compressionType: none


aws cloudformation create-stack   --stack-name GlueTableStack   --template-body file://aws-glue-table-cft.yaml   --parameters ParameterKey=DatabaseName,ParameterValue=test-db ParameterKey=TableName,ParameterValue=table-name ParameterKey=S3Location,ParameterValue=s3://your-s3-bucket/path/to/data

stages:
  - deploy

variables:
  STACK_NAME: "GlueTableStack"
  TEMPLATE_FILE: "aws-glue-table-cft.yaml"
  DATABASE_NAME: "test-db"
  TABLE_NAME: "table-name"
  S3_LOCATION: "s3://your-s3-bucket/path/to/data"

deploy_stack:
  stage: deploy
  script:
    - |
      if aws cloudformation describe-stacks --stack-name $STACK_NAME 2>/dev/null; then
        echo "Stack already exists. Skipping stack creation."
      else
        aws cloudformation create-stack \
          --stack-name $STACK_NAME \
          --template-body file://$TEMPLATE_FILE \
          --parameters \
            ParameterKey=DatabaseName,ParameterValue=$DATABASE_NAME \
            ParameterKey=TableName,ParameterValue=$TABLE_NAME \
            ParameterKey=S3Location,ParameterValue=$S3_LOCATION
      fi



AWSTemplateFormatVersion: '2010-09-09'
Description: 'Create On-Demand Glue Crawler for Schema Inference'

Parameters:
  DatabaseName:
    Type: String
    Description: Name of the Glue Database
  TableName:
    Type: String
    Description: Name of the Glue Table
  S3Location:
    Type: String
    Description: S3 location to crawl for schema inference

Resources:
  GlueCrawler:
    Type: AWS::Glue::Crawler
    Properties:
      Name: GlueCrawlerForSchemaInference
      Schedule: ''
      DatabaseName: !Ref DatabaseName
      Targets:
        S3Targets:
          - Path: !Ref S3Location
      Role: !GetAtt GlueCrawlerRole.Arn
      TableStyle: 'EXTERNAL_TABLE'

  GlueCrawlerRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal:
              Service: 'glue.amazonaws.com'
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyName: 'GlueCrawlerPolicy'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: 'Allow'
                Action:
                  - 's3:ListBucket'
                  - 's3:GetObject'
                Resource: !Sub 'arn:aws:s3:::${S3Location}*'
