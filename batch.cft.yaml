AWSTemplateFormatVersion: "2010-09-09"
Description: 'AWS Batch via Fargate'

Parameters:
  ComputeEnvironment:
    Type: String
    Description: ARN of the AWS Batch Compute Environment

  ImageName:
    Type: String
    Description: Name of the Docker image

  JobRoleArn:
    Type: String
    Description: ARN of the IAM role for the job

  ExecutionRoleArn:
    Type: String
    Description: ARN of the IAM role for execution

Resources:
  JobQueue:
    Type: AWS::Batch::JobQueue
    Properties:
      ComputeEnvironmentOrder:
        - ComputeEnvironment: !Ref ComputeEnvironment
          Order: 1
      Priority: 1
      State: ENABLED

  JobDefinition:
    Type: AWS::Batch::JobDefinition
    Properties:
      Type: container
      JobDefinitionName: !Ref AWS::StackName
      PlatformCapabilities:
        - FARGATE
      Timeout:
        AttemptDurationSeconds: 60
      RetryStrategy:
        Attempts: 1
      ContainerProperties:
        Command:
          - echo
          - hello
          - world
        Image: !Ref ImageName
        NetworkConfiguration:
          AssignPublicIp: ENABLED
        ResourceRequirements:
          - Type: VCPU
            Value: 0.5
          - Type: MEMORY
            Value: 1024
        JobRoleArn: !Ref JobRoleArn
        ExecutionRoleArn: !Ref ExecutionRoleArn



aws cloudformation create-stack \
  --stack-name YourBatchStack \
  --template-body file://your-template-file.yaml \
  --parameters ParameterKey=ComputeEnvironment,ParameterValue=arn:aws:batch:your-region:your-account-id:compute-environment/your-compute-env \
               ParameterKey=ImageName,ParameterValue=your-docker-image-name \
               ParameterKey=JobRoleArn,ParameterValue=arn:aws:iam::your-account-id:role/your-job-role \
               ParameterKey=ExecutionRoleArn,ParameterValue=arn:aws:iam::your-account-id:role/your-execution-role \
  --capabilities CAPABILITY_IAM


stages:
  - deploy

variables:
  STACK_NAME: YourBatchStack
  TEMPLATE_FILE: path/to/your/template.yaml
  AWS_DEFAULT_REGION: your-region
  AWS_ACCESS_KEY_ID: $AWS_ACCESS_KEY_ID  # Set your AWS credentials in GitLab CI/CD environment variables
  AWS_SECRET_ACCESS_KEY: $AWS_SECRET_ACCESS_KEY
  COMPUTE_ENVIRONMENT: arn:aws:batch:your-region:your-account-id:compute-environment/your-compute-env
  DOCKER_IMAGE_NAME: your-docker-image-name
  JOB_ROLE_ARN: arn:aws:iam::your-account-id:role/your-job-role
  EXECUTION_ROLE_ARN: arn:aws:iam::your-account-id:role/your-execution-role

deploy_stack:
  stage: deploy
  script:
    - |
      if aws cloudformation describe-stacks --stack-name $STACK_NAME 2>/dev/null; then
        echo "Stack already exists. Skipping stack creation."
      else
        aws cloudformation create-stack \
          --stack-name $STACK_NAME \
          --template-body file://$TEMPLATE_FILE \
          --parameters \
            ParameterKey=ComputeEnvironment,ParameterValue=$COMPUTE_ENVIRONMENT \
            ParameterKey=ImageName,ParameterValue=$DOCKER_IMAGE_NAME \
            ParameterKey=JobRoleArn,ParameterValue=$JOB_ROLE_ARN \
            ParameterKey=ExecutionRoleArn,ParameterValue=$EXECUTION_ROLE_ARN \
          --capabilities CAPABILITY_IAM
      fi


# AWS Batch stack (MyBatchStack)
Resources:
  MyJobQueue:
    Type: AWS::Batch::JobQueue
    Properties:
      ...
  MyJobDefinition:
    Type: AWS::Batch::JobDefinition
    Properties:
      ...
Outputs:
  JobQueueArn:
    Value: !GetAtt MyJobQueue.Arn
    Export:
      Name: MyJobQueueArnExport
  JobDefinitionArn:
    Value: !GetAtt MyJobDefinition.Arn
    Export:
      Name: MyJobDefinitionArnExport




# AWS Step Functions stack (MyStepFunctionsStack)
Resources:
  MyStateMachine:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      DefinitionString:
        ...
        - ...
        - Type: Task
          Resource: arn:aws:states:your-region:your-account-id:task:MyTask
          Parameters:
            JobQueueArn.$: !ImportValue MyBatchStack-MyJobQueueArnExport
            JobDefinitionArn.$: !ImportValue MyBatchStack-MyJobDefinitionArnExport
